syntax = "proto3";

// Message that vehicle sends every second.
message LocationMessage {
    VehicleDescriptor vehicle_descriptor = 1;
    Position position = 2;
    int64 timestamp = 3; // milliseconds since epoch
    DoorOpeningStatus door_status = 4;
    StopButtonStatus stop_button_status = 5;
}

// This enum describes the status of the (unlocking of the) doors of the vehicle. 
// DoorOpenStatus is OPEN when the doors are open. When the doors are locked the status is CLOSED. The DoorOpenStatus is RELEASED  when the passengers can open the doors but de the doors are physically closed.
enum DoorOpeningStatus {
    DOOR_OPENING_STATUS_CLOSED = 0;
    DOOR_OPENING_STATUS_OPEN = 1;
    DOOR_OPENING_STATUS_NO_DATA = 2;
    DOOR_OPENING_STATUS_RELEASED = 3;
}

// This enum describes if the stop button is activated 
// indicating that passengers want tot get out at it's next stop
enum StopButtonStatus {
    STOP_BUTTON_STATUS_NOT_ACTIVATED = 0;
    STOP_BUTTON_STATUS_ACTIVATED = 1;
    STOP_BUTTON_STATUS_NO_DATA = 2;
}

message Position {
    float latitude = 1; // WGS 84
    float longitude = 2; // WGS 84
    float accuracy = 3; // in m

    float speed = 4; // speed in m/s
    float bearing = 5; // bearing in degrees
    // the odometer is always used relatively, 
    // the odometer may be either the total distance a vehicle has traveled during its lifetime,
    // today or during the current trip (resetting more often is not allowed)
    int64 odometer = 6; // in meters
    float hdop = 7; // horizontal dilution of precision. https://en.m.wikipedia.org/wiki/Dilution_of_precision_(navigation)
}

// This enum describes which side of a rail vehicle is in front.
enum DrivingDirection {
    UNDEFINED = 0;
    A_SIDE = 1;
    B_SIDE = 2;
}

// Fields to identify vehicle
message VehicleDescriptor {
    string data_owner_code = 1; // required
    
    // One of block_code and vehicle_number is required
    int32 block_code = 2;
    int32 vehicle_number = 3;
    // Optional, only relevant for vehicles that can run in two directions. 
    DrivingDirection driving_direction  = 5; 
    // Optional, number of vehicles being coupled in total including the reporting vehicle.
    // For a single tram this is one, for two trams combined this value is two. When not reported (=0) 1 can be assumed.
    int32 number_of_vehicles_coupled = 6; 


    JourneyDescriptor journey_descriptor = 4; // optional
}

// JourneyDescriptor are optional parameters to describe a journey
// When JourneyDescriptor data is filled OpenPrio data can be combined with a static timetable without the use of
// other realtime sources like for example KV6 or SIRI-VM (those are used to link the vehicle_number / block_code with a journey_number). 
// To fill in the JourneyDescriptor you need more inteligence in the system that creates the OpenPrio data, because the system
// should be aware what Journey the vehicle is running on. 
// If you want to use journey_descriptor you need to fill in all the parameters within the JourneyDescriptor. 
message JourneyDescriptor {
    int32 journey_number = 1;
    // Unique line number within a data_owner (operator).
    string line_planning_number = 2;
    // The operating_day this journey is scheduled, be aware this is not necessarily the current date. 
    string operating_day = 3;
}